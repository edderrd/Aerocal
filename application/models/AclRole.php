<?php

/**
 * AclRole
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class AclRole extends BaseAclRole
{
    public static function findAll()
    {
        return Doctrine_Query::create()
                    ->from("AclRole r")
                    ->leftJoin('r.AclPermission p')
                    ->leftJoin('p.AclResource re')
                    ->fetchArray();

    }
    
    public static function create($params)
    {
        $aclRole = new AclRole();
        $aclRole->name = $params['name'];
        $aclRole->description = $params['description'];
        $aclRole->save();
        $aclRole->refresh();
        
        if (!empty($params['resources']))
        {
            $resources = is_array($params['resources']) ? $params['resources'] : array($params['resources']);
            foreach($resources as $resource)
            {
                $permission = new AclPermission();
                $permission->resource_id = $resource;
                $permission->role_id = $aclRole->id;
                $permission->save();
            }            
        }
        
        return $aclRole->id;
    }

    /**
     * Find a role by his id
     * @param int $id
     * @return array
     */
    public static function findById($id)
    {
        $class = __CLASS__;
        return Doctrine_Query::create()
                    ->from("$class r")
                    ->leftJoin('r.AclPermission p')
                    ->leftJoin('p.AclResource re')
                    ->addWhere("r.id = $id")
                    ->fetchOne()
                    ->toArray(true);
    }

    /**
     * Update a role and his permissions
     * @param array $params
     * @return int
     */
    public static function edit($params)
    {
        $class = __CLASS__;

        $aclRole = new $class($class, false);
        $aclRole->id = $params['aclrole_id'];
        $aclRole->name = $params['name'];
        $aclRole->description = $params['description'];

        /**if (!empty($params['resources']) || !empty($params['resources_available']))
        {

            $params['resources'] = isset($params['resources']) ? $params['resources'] : array();
            $params['resources_available'] = isset($params['resources_available']) ? $params['resources_available'] : array();

            AclPermission::deleteRolePermissions($aclRole->id, $params['resources']);

            foreach($params['resources_available']  as $resource)
            {
                $permission = new AclPermission();
                $permission->resource_id = $resource;
                $permission->role_id = $aclRole->id;
                $permission->save();
            }
        }*/
        $aclRole->save();

        return $aclRole->id;
    }
}